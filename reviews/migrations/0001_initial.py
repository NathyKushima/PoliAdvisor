# Generated by Django 5.1.3 on 2024-12-01 21:05

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('department_code', models.CharField(max_length=45, unique=True)),
                ('department_name', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nusp', models.IntegerField(unique=True)),
                ('fullname', models.CharField(max_length=100)),
                ('course', models.CharField(choices=[('ENG_AMBIENTAL', 'Engenharia Ambiental'), ('ENG_CIVIL', 'Engenharia Civil'), ('ENG_COMPUTACAO', 'Engenharia da Computação'), ('ENG_MINAS', 'Engenharia de Minas'), ('ENG_PETROLEO', 'Engenharia de Petróleo'), ('ENG_NAVAL', 'Engenharia Naval'), ('ENG_METALURGICA', 'Engenharia Metalúrgica'), ('ENG_PRODUCAO', 'Engenharia de Produção'), ('ENG_ELETRICA', 'Engenharia Elétrica'), ('ENG_MECANICA', 'Engenharia Mecânica'), ('ENG_MECATRONICA', 'Engenharia Mecatrônica'), ('ENG_QUIMICA', 'Engenharia Química'), ('ENG_MATERIAIS', 'Engenharia de Materiais')], default='ENG_MECATRONICA', max_length=20)),
                ('start_date', models.DateField()),
                ('user_photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('discipline_code', models.CharField(max_length=45, unique=True)),
                ('name', models.CharField(max_length=45)),
                ('class_credits', models.IntegerField()),
                ('work_credits', models.IntegerField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplines', to='reviews.department')),
            ],
        ),
        migrations.CreateModel(
            name='CourseCoversSubjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mandatory_type', models.IntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='reviews.course')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='reviews.discipline')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('comment_content', models.TextField()),
                ('comment_date', models.DateField(auto_now_add=True)),
                ('status_comment', models.IntegerField()),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='reviews.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='reviews.discipline')),
            ],
        ),
        migrations.CreateModel(
            name='UserCurtesComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='reviews.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTakesCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='reviews.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTookDiscipline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_completed', models.DateField()),
                ('note_teaching', models.IntegerField()),
                ('note_material', models.IntegerField()),
                ('note_difficulty', models.IntegerField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='reviews.discipline')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplines_taken', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
